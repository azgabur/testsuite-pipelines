apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: kubectl-login
spec:
  params:
    - description: Testsuite image to run tests on
      name: testsuite-image
      type: string
    - description: API URL of the Openshift cluster
      name: kube-api
      type: string
  results:
    - name: kubeconfig-path
      description: Path to new kubeconfig in the workspace
  steps:
    - args:
        - >-
          export CLUSTER_NAME=$(echo $(params.kube-api) | sed 's/.*api\.\([^\.]*\).*/\1/') &&
          export KUBECONFIG=$(workspaces.shared-workspace.path)/${CLUSTER_NAME} &&
          export OAUTH_URL=$(echo $(params.kube-api) | sed -e 's/api/oauth-openshift.apps/' -e 's/\(.*\):.*/\1/')/oauth/authorize &&
          export TOKEN=$(curl -XPOST -kis --data response_type=token --data client_id=openshift-challenging-client -u ${KUBE_USER}:${KUBE_PASSWORD} ${OAUTH_URL} | grep "Location:" | sed 's/.*access_token=\([^&]*\).*/\1/') &&
          kubectl config set-cluster ctx --server $(params.kube-api) --insecure-skip-tls-verify=true &&
          kubectl config set-credentials user --token=${TOKEN} &&
          kubectl config set-context ctx --user=user --cluster=ctx &&
          kubectl config use-context ctx &&
          echo -n ${KUBECONFIG} | tee $(results.kubeconfig-path.path)
      command:
        - /bin/bash
        - -cveo
        - pipefail
      resources:
        limits:
          cpu: '250m'
          memory: 128Mi
      env:
        - name: WORKSPACE
          value: $(workspaces.shared-workspace.path)
        - name: KUBE_USER
          valueFrom:
            secretKeyRef:
              key: KUBE_USER
              name: openshift-pipelines-credentials
        - name: KUBE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: KUBE_PASSWORD
              name: openshift-pipelines-credentials
      image: $(params.testsuite-image)
      imagePullPolicy: Always
      name: kubectl-login
  workspaces:
    - name: shared-workspace
